#!/usr/bin/python

#
# input format:
#  lines of verilog binary strings, e.g.
#    1001_10101_10011_1101
#  comments beginning with # sign
#  lines with just whitespace
#
# output format:
#  a module that implements a rom
#
# usage: bsg_ascii_to_rom.py <filename> <modulename>
#
# to compress out zero entries with a default 0 setting:
#
# usage: bsg_ascii_to_rom.py <filename> <modulename> zero  
# 
 
import sys;
import os;
import binascii;

zero = 0;

if ((len(sys.argv)==4) and sys.argv[3]=="zero") :
    zero = 1

if ((len(sys.argv)!=3) and (len(sys.argv)!=4)) :
    print("Usage ascii_to_rom.py <filename> <modulename>")
    exit = -1

myFile = open(sys.argv[1],"r")
romFilename = str(sys.argv[2]) + ".v"
romFile = open(romFilename, "w")

i = 0
romFile.write("// auto-generated by bsg_ascii_to_rom.py from " + os.path.abspath(sys.argv[1]) + "; do not modify\n")
romFile.write("module " + sys.argv[2] + " #(parameter width_p=-1, addr_width_p=-1)\n")
romFile.write("(input  [addr_width_p-1:0] addr_i\n")
romFile.write(",output logic [width_p-1:0]      data_o\n")
romFile.write(");\n")
romFile.write("always_comb case(addr_i)\n")
all_zero = set("0_")
for line in myFile.readlines() :
    line = line.strip()
    if (len(line)!=0):
        if (line[0] != "#") :
            if (not zero or not (set(line) <= all_zero)) :
                digits_only = "".join(filter(lambda m:m.isdigit(), str(line)))
                
                # http://stackoverflow.com/questions/2072351/python-conversion-from-binary-string-to-hexadecimal
                hstr = '%0*X' % ((len(digits_only) + 3) // 4, int(digits_only, 2))

                romFile.write(str(i).rjust(10)+": data_o = width_p ' (" + str(len(digits_only))+ "'b"+line+");"+" // 0x"+hstr+"\n")
            i = i + 1
        else :
            romFile.write("                                 // " + line + "\n")
if (zero) : 
    romFile.write("default".rjust(10) + ": data_o = { width_p { 1'b0 } };\n")
else :
    romFile.write("default".rjust(10) + ": data_o = 'X;\n")
romFile.write("endcase\n")
romFile.write("endmodule\n")